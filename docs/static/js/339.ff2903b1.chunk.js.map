{"version":3,"file":"static/js/339.ff2903b1.chunk.js","mappings":"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","sources":["pages/FloorPlanPage/FloorPlanPage.tsx"],"sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\nimport ReactFlow, { \n  Node, \n  Edge, \n  addEdge, \n  Background, \n  Controls, \n  MiniMap, \n  useNodesState, \n  useEdgesState,\n  ConnectionMode,\n  Position\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@mui/material';\n\n// Custom Room Node Component\nconst RoomNode = ({ data }: { data: any }) => {\n  return (\n    <div className=\"room-node\">\n      <div className=\"room-header\">\n        <span className=\"room-icon\">{data.icon}</span>\n        <span className=\"room-name\">{data.label}</span>\n      </div>\n      <div className=\"room-info\">\n        <div className=\"room-size\">{data.size}</div>\n        <div className=\"room-devices\">{data.deviceCount} devices</div>\n      </div>\n    </div>\n  );\n};\n\n// Custom Device Node Component\nconst DeviceNode = ({ data }: { data: any }) => {\n  return (\n    <div className=\"device-node\">\n      <div className=\"device-icon\" style={{ color: data.color }}>\n        {data.icon}\n      </div>\n      <div className=\"device-name\">{data.label}</div>\n      <div className=\"device-status\">\n        <span className={`status-dot ${data.online ? 'online' : 'offline'}`}></span>\n        {data.online ? 'Online' : 'Offline'}\n      </div>\n    </div>\n  );\n};\n\n// Node types\nconst nodeTypes = {\n  room: RoomNode,\n  device: DeviceNode,\n};\n\n// Device library\nconst SMART_DEVICES = [\n  { type: 'smart-bulb', name: 'Smart Bulb', icon: '💡', color: '#ffc107' },\n  { type: 'camera', name: 'Security Camera', icon: '📹', color: '#dc3545' },\n  { type: 'thermostat', name: 'Thermostat', icon: '🌡️', color: '#0d6efd' },\n  { type: 'sensor', name: 'Door Sensor', icon: '🚪', color: '#28a745' },\n  { type: 'speaker', name: 'Smart Speaker', icon: '🔊', color: '#6f42c1' },\n  { type: 'outlet', name: 'Smart Outlet', icon: '🔌', color: '#fd7e14' },\n];\n\nconst FloorPlanEditor = () => {\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [backgroundImage, setBackgroundImage] = useState<string | null>(null);\n  const [selectedDevice, setSelectedDevice] = useState(null);\n  const [message, setMessage] = useState('Ready to import floor plan');\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  // Roboflow API configuration\n  const ROBOFLOW_API_KEY = \"YOUR_API_KEY_HERE\"; // Replace with your actual API key\n  const ROBOFLOW_MODEL = \"floor-plan_-room-detection/2\";\n\n  // Connect nodes\n  const onConnect = useCallback(\n    (params: any) => setEdges((eds) => addEdge({ ...params, animated: true }, eds)),\n    [setEdges]\n  );\n\n  // Show message\n  const showMessage = (msg: string, duration = 3000) => {\n    setMessage(msg);\n    setTimeout(() => setMessage('Ready'), duration);\n  };\n\n  // Upload and analyze floor plan\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Show background image\n    const imageUrl = URL.createObjectURL(file);\n    setBackgroundImage(imageUrl);\n    \n    setIsAnalyzing(true);\n    showMessage('Analyzing floor plan with AI...', 5000);\n\n    try {\n      // Roboflow API call\n      const formData = new FormData();\n      formData.append('file', file);\n\n      const response = await fetch(`https://detect.roboflow.com/${ROBOFLOW_MODEL}`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${ROBOFLOW_API_KEY}`\n        },\n        body: formData\n      });\n\n      if (!response.ok) {\n        throw new Error('API request failed');\n      }\n\n      const result = await response.json();\n      \n      // Convert detections to React-Flow nodes\n      const detectedRooms = result.predictions?.map((prediction: any, index: number) => {\n        const roomTypes = {\n          'kitchen': { icon: '🍳', name: 'Kitchen' },\n          'bedroom': { icon: '🛏️', name: 'Bedroom' },\n          'bathroom': { icon: '🚿', name: 'Bathroom' },\n          'living': { icon: '🛋️', name: 'Living Room' },\n          'dining': { icon: '🍽️', name: 'Dining Room' },\n        };\n\n        const roomType = roomTypes[prediction.class as keyof typeof roomTypes] || { icon: '📦', name: 'Room' };\n        \n        return {\n          id: `room-${index}`,\n          type: 'room',\n          position: { \n            x: prediction.x - prediction.width / 2, \n            y: prediction.y - prediction.height / 2 \n          },\n          data: {\n            label: `${roomType.name} ${index + 1}`,\n            icon: roomType.icon,\n            size: `${Math.round(prediction.width)}×${Math.round(prediction.height)}`,\n            deviceCount: 0,\n            confidence: prediction.confidence\n          },\n          sourcePosition: Position.Right,\n          targetPosition: Position.Left,\n        };\n      }) || [];\n\n      setNodes(detectedRooms);\n      showMessage(`Detected ${detectedRooms.length} rooms successfully!`);\n      \n    } catch (error) {\n      console.error('Room detection failed:', error);\n      showMessage('Room detection failed. You can add rooms manually.');\n      \n      // Add a sample room if detection fails\n      setNodes([{\n        id: 'room-1',\n        type: 'room',\n        position: { x: 200, y: 100 },\n        data: {\n          label: 'Sample Room',\n          icon: '🏠',\n          size: '200×150',\n          deviceCount: 0\n        },\n        sourcePosition: Position.Right,\n        targetPosition: Position.Left,\n      }]);\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  // Add device to canvas\n  const addDevice = (deviceType: string) => {\n    const device = SMART_DEVICES.find(d => d.type === deviceType);\n    if (!device) return;\n\n    const newDevice = {\n      id: `device-${Date.now()}`,\n      type: 'device',\n      position: { \n        x: Math.random() * 400 + 100, \n        y: Math.random() * 300 + 100 \n      },\n      data: {\n        label: device.name,\n        icon: device.icon,\n        color: device.color,\n        online: Math.random() > 0.3, // Random online status\n        deviceType: device.type\n      },\n      sourcePosition: Position.Right,\n      targetPosition: Position.Left,\n    };\n\n    setNodes((nds) => [...nds, newDevice]);\n    showMessage(`${device.name} added to floor plan`);\n  };\n\n  // Add manual room\n  const addRoom = () => {\n    const roomIcons = ['🛏️', '🍳', '🛋️', '🚿', '🏢', '📚'];\n    const randomIcon = roomIcons[Math.floor(Math.random() * roomIcons.length)];\n    \n    const newRoom = {\n      id: `room-${Date.now()}`,\n      type: 'room',\n      position: { x: 150, y: 150 },\n      data: {\n        label: 'New Room',\n        icon: randomIcon,\n        size: '150×120',\n        deviceCount: 0\n      },\n      sourcePosition: Position.Right,\n      targetPosition: Position.Left,\n    };\n\n    setNodes((nds) => [...nds, newRoom]);\n    showMessage('Room added manually');\n  };\n\n  // Clear canvas\n  const [confirmOpen, setConfirmOpen] = useState(false);\n\n  const handleConfirmOpen = () => {\n    setConfirmOpen(true);\n  };\n\n  const handleConfirmClose = () => {\n    setConfirmOpen(false);\n  };\n\n  const handleConfirmClear = () => {\n    setNodes([]);\n    setEdges([]);\n    setBackgroundImage(null);\n    showMessage('Canvas cleared');\n    setConfirmOpen(false);\n  };\n\n  const clearCanvas = () => {\n    handleConfirmOpen();\n  };\n\n  return (\n    <div className=\"floor-plan-app\">\n      {/* Confirmation Dialog */}\n      <Dialog\n        open={confirmOpen}\n        onClose={handleConfirmClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">\n          Confirm Clear Canvas\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            Are you sure you want to clear all rooms and devices? This action cannot be undone.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleConfirmClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleConfirmClear} color=\"error\" autoFocus>\n            Clear All\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Toolbar */}\n      <div className=\"toolbar\">\n        <div className=\"toolbar-section\">\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            accept=\"image/*\"\n            onChange={handleFileUpload}\n            style={{ display: 'none' }}\n          />\n          \n          <button \n            className=\"btn-primary\"\n            onClick={() => fileInputRef.current?.click()}\n            disabled={isAnalyzing}\n          >\n            {isAnalyzing ? '🔄 Analyzing...' : '📁 Import Floor Plan'}\n          </button>\n          \n          <button className=\"btn-secondary\" onClick={addRoom}>\n            🏠 Add Room\n          </button>\n          \n          <button className=\"btn-danger\" onClick={clearCanvas}>\n            🗑️ Clear\n          </button>\n        </div>\n        \n        <div className=\"status\">\n          <span>{message}</span>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"main-content\">\n        {/* React-Flow Canvas */}\n        <div className=\"flow-container\">\n          <ReactFlow\n            nodes={nodes}\n            edges={edges}\n            onNodesChange={onNodesChange}\n            onEdgesChange={onEdgesChange}\n            onConnect={onConnect}\n            nodeTypes={nodeTypes}\n            connectionMode={ConnectionMode.Loose}\n            fitView\n            style={{\n              backgroundImage: backgroundImage ? `url(${backgroundImage})` : 'none',\n              backgroundSize: 'contain',\n              backgroundRepeat: 'no-repeat',\n              backgroundPosition: 'center',\n              opacity: backgroundImage ? 0.3 : 1\n            }}\n          >\n            <Background color=\"#f1f1f1\" gap={20} />\n            <Controls />\n            <MiniMap \n              nodeColor=\"#0d6efd\"\n              maskColor=\"rgba(255, 255, 255, 0.2)\"\n              style={{ background: '#f8f9fa' }}\n            />\n          </ReactFlow>\n        </div>\n\n        {/* Device Library */}\n        <div className=\"device-library\">\n          <h3>Smart Devices</h3>\n          <p className=\"library-hint\">Click to add devices to your floor plan</p>\n          \n          <div className=\"device-grid\">\n            {SMART_DEVICES.map((device) => (\n              <div\n                key={device.type}\n                className=\"device-card\"\n                onClick={() => addDevice(device.type)}\n              >\n                <div className=\"device-card-icon\" style={{ color: device.color }}>\n                  {device.icon}\n                </div>\n                <div className=\"device-card-name\">{device.name}</div>\n              </div>\n            ))}\n          </div>\n          \n          <div className=\"library-stats\">\n            <div className=\"stat\">\n              <span className=\"stat-number\">{nodes.filter(n => n.type === 'room').length}</span>\n              <span className=\"stat-label\">Rooms</span>\n            </div>\n            <div className=\"stat\">\n              <span className=\"stat-number\">{nodes.filter(n => n.type === 'device').length}</span>\n              <span className=\"stat-label\">Devices</span>\n            </div>\n            <div className=\"stat\">\n              <span className=\"stat-number\">{edges.length}</span>\n              <span className=\"stat-label\">Connections</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <style>{`\n        .floor-plan-app {\n          height: 100vh;\n          display: flex;\n          flex-direction: column;\n          background: #f8f9fa;\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n        }\n\n        .toolbar {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          padding: 16px 24px;\n          background: white;\n          border-bottom: 1px solid #e9ecef;\n          box-shadow: 0 2px 4px rgba(0,0,0,0.05);\n        }\n\n        .toolbar-section {\n          display: flex;\n          gap: 12px;\n        }\n\n        .btn-primary, .btn-secondary, .btn-danger {\n          padding: 10px 16px;\n          border: none;\n          border-radius: 6px;\n          font-weight: 500;\n          cursor: pointer;\n          transition: all 0.2s ease;\n          font-size: 14px;\n        }\n\n        .btn-primary {\n          background: #0d6efd;\n          color: white;\n        }\n\n        .btn-primary:hover {\n          background: #0b5ed7;\n        }\n\n        .btn-primary:disabled {\n          background: #6c757d;\n          cursor: not-allowed;\n        }\n\n        .btn-secondary {\n          background: #6c757d;\n          color: white;\n        }\n\n        .btn-secondary:hover {\n          background: #5c636a;\n        }\n\n        .btn-danger {\n          background: #dc3545;\n          color: white;\n        }\n\n        .btn-danger:hover {\n          background: #c82333;\n        }\n\n        .status {\n          font-size: 14px;\n          color: #6c757d;\n          font-weight: 500;\n        }\n\n        .main-content {\n          flex: 1;\n          display: flex;\n          margin: 20px;\n          gap: 20px;\n        }\n\n        .flow-container {\n          flex: 1;\n          background: white;\n          border-radius: 8px;\n          box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n          overflow: hidden;\n        }\n\n        .device-library {\n          width: 280px;\n          background: white;\n          border-radius: 8px;\n          box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n          padding: 20px;\n          display: flex;\n          flex-direction: column;\n        }\n\n        .device-library h3 {\n          margin: 0 0 8px 0;\n          color: #333;\n          font-size: 18px;\n        }\n\n        .library-hint {\n          margin: 0 0 20px 0;\n          color: #6c757d;\n          font-size: 13px;\n        }\n\n        .device-grid {\n          display: grid;\n          grid-template-columns: repeat(2, 1fr);\n          gap: 12px;\n          margin-bottom: 24px;\n        }\n\n        .device-card {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          padding: 16px 8px;\n          border: 1px solid #e9ecef;\n          border-radius: 8px;\n          cursor: pointer;\n          transition: all 0.2s ease;\n          background: white;\n        }\n\n        .device-card:hover {\n          border-color: #0d6efd;\n          background: #f8f9ff;\n          transform: translateY(-2px);\n          box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n        }\n\n        .device-card-icon {\n          font-size: 24px;\n          margin-bottom: 8px;\n        }\n\n        .device-card-name {\n          font-size: 12px;\n          color: #6c757d;\n          text-align: center;\n          font-weight: 500;\n        }\n\n        .library-stats {\n          display: flex;\n          justify-content: space-between;\n          padding-top: 20px;\n          border-top: 1px solid #e9ecef;\n        }\n\n        .stat {\n          text-align: center;\n        }\n\n        .stat-number {\n          display: block;\n          font-size: 20px;\n          font-weight: 600;\n          color: #0d6efd;\n        }\n\n        .stat-label {\n          font-size: 11px;\n          color: #6c757d;\n          text-transform: uppercase;\n          letter-spacing: 0.5px;\n        }\n\n        /* Custom Node Styles */\n        :global(.room-node) {\n          background: white;\n          border: 2px solid #0d6efd;\n          border-radius: 8px;\n          padding: 12px;\n          min-width: 140px;\n          box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n        }\n\n        :global(.room-header) {\n          display: flex;\n          align-items: center;\n          gap: 8px;\n          margin-bottom: 8px;\n        }\n\n        :global(.room-icon) {\n          font-size: 18px;\n        }\n\n        :global(.room-name) {\n          font-weight: 600;\n          color: #333;\n          font-size: 14px;\n        }\n\n        :global(.room-info) {\n          display: flex;\n          flex-direction: column;\n          gap: 4px;\n        }\n\n        :global(.room-size) {\n          font-size: 12px;\n          color: #6c757d;\n        }\n\n        :global(.room-devices) {\n          font-size: 11px;\n          color: #28a745;\n          font-weight: 500;\n        }\n\n        :global(.device-node) {\n          background: white;\n          border: 2px solid #28a745;\n          border-radius: 8px;\n          padding: 10px;\n          min-width: 120px;\n          text-align: center;\n          box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n        }\n\n        :global(.device-icon) {\n          font-size: 20px;\n          margin-bottom: 6px;\n        }\n\n        :global(.device-name) {\n          font-size: 12px;\n          font-weight: 600;\n          color: #333;\n          margin-bottom: 6px;\n        }\n\n        :global(.device-status) {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          gap: 4px;\n          font-size: 10px;\n          color: #6c757d;\n        }\n\n        :global(.status-dot) {\n          width: 6px;\n          height: 6px;\n          border-radius: 50%;\n          background: #dc3545;\n        }\n\n        :global(.status-dot.online) {\n          background: #28a745;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default FloorPlanEditor;"],"names":["nodeTypes","room","_ref","data","_jsxs","className","children","_jsx","icon","label","size","deviceCount","device","_ref2","style","color","concat","online","SMART_DEVICES","type","name","FloorPlanEditor","nodes","setNodes","onNodesChange","useNodesState","edges","setEdges","onEdgesChange","useEdgesState","isAnalyzing","setIsAnalyzing","useState","backgroundImage","setBackgroundImage","selectedDevice","setSelectedDevice","message","setMessage","fileInputRef","useRef","onConnect","useCallback","params","eds","addEdge","_objectSpread","animated","showMessage","msg","duration","arguments","length","undefined","setTimeout","confirmOpen","setConfirmOpen","handleConfirmClose","Dialog","open","onClose","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","onClick","handleConfirmClear","autoFocus","ref","accept","onChange","async","_event$target$files","file","event","target","files","imageUrl","URL","createObjectURL","_result$predictions","formData","FormData","append","response","fetch","method","headers","body","ok","Error","detectedRooms","json","predictions","map","prediction","index","roomType","class","position","x","width","y","height","Math","round","confidence","sourcePosition","Position","Right","targetPosition","Left","error","console","display","_fileInputRef$current","current","click","disabled","addRoom","roomIcons","randomIcon","floor","random","newRoom","Date","now","nds","clearCanvas","ReactFlow","connectionMode","ConnectionMode","Loose","fitView","backgroundSize","backgroundRepeat","backgroundPosition","opacity","Background","gap","Controls","MiniMap","nodeColor","maskColor","background","deviceType","find","d","newDevice","addDevice","filter","n"],"sourceRoot":""}
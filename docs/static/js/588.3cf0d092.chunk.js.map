{"version":3,"file":"static/js/588.3cf0d092.chunk.js","mappings":"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","sources":["pages/TimelinePage/TimelineView.tsx","pages/TimelinePage/EventFormModal.tsx","pages/TimelinePage/TimelinePage.tsx"],"sourcesContent":["import React from 'react';\nimport { \n  TimelineEvent, \n  TimelineView as TimelineViewType,\n  TimelineProject as Project,\n  TeamMember\n} from '../../types/domains/timeline.types';\nimport { \n  Box, \n  Typography, \n  Paper, \n  Chip, \n  Avatar,\n  Stack,\n  ButtonGroup,\n  Button,\n  useTheme\n} from '@mui/material';\nimport { \n  format, \n  isSameDay, \n  isSameWeek, \n  isSameMonth, \n  isSameYear, \n  addDays, \n  startOfWeek, \n  endOfWeek, \n  // eachDayOfInterval,\n  isToday,\n  isBefore,\n  isAfter,\n  // parseISO\n} from 'date-fns';\nimport { CalendarMonth, ViewWeek, Today, ListAlt } from '@mui/icons-material';\n\ntype TimelineViewProps = {\n  view: TimelineViewType;\n  events: TimelineEvent[];\n  onEventClick: (event: TimelineEvent) => void;\n  selectedDate: Date;\n  projects: Project[];\n  teamMembers: TeamMember[];\n  onViewChange: (view: TimelineViewType) => void;\n};\n\nconst TimelineView: React.FC<TimelineViewProps> = ({\n  view,\n  events,\n  onEventClick,\n  selectedDate,\n  projects,\n  teamMembers,\n  onViewChange,\n}) => {\n  const theme = useTheme();\n\n  // Get project and team member info\n  const getProject = (projectId: string) => \n    projects.find(p => p.id === projectId) || { name: 'Unknown', color: '#ccc' };\n    \n  const getTeamMember = (memberId: string) =>\n    teamMembers.find(m => m.id === memberId) || { name: 'Unknown', role: '', avatar: '' };\n\n  // Filter events based on the selected view and date\n  const getFilteredEvents = () => {\n    if (!events.length) return [];\n    \n    return events.filter(event => {\n      const eventDate = new Date(event.startDate);\n      const eventEndDate = new Date(event.endDate);\n      \n      switch (view) {\n        case 'day':\n          return isSameDay(eventDate, selectedDate);\n        case 'week':\n          const start = startOfWeek(selectedDate);\n          const end = endOfWeek(selectedDate);\n          return (eventDate >= start && eventDate <= end) || \n                 (eventEndDate >= start && eventEndDate <= end);\n        case 'month':\n          return isSameMonth(eventDate, selectedDate);\n        case 'list':\n        default:\n          return true;\n      }\n    });\n  };\n\n  const filteredEvents = getFilteredEvents();\n\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'completed':\n        return 'success';\n      case 'in-progress':\n        return 'info';\n      case 'pending':\n        return 'warning';\n      case 'overdue':\n        return 'error';\n      default:\n        return 'default';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority.toLowerCase()) {\n      case 'high':\n        return 'error';\n      case 'medium':\n        return 'warning';\n      case 'low':\n        return 'info';\n      default:\n        return 'default';\n    }\n  };\n\n  const renderEvent = (event: TimelineEvent) => {\n    const project = getProject(event.project);\n    const assignee = getTeamMember(event.assignee);\n    \n    return (\n      <Paper \n        key={event.id} \n        onClick={() => onEventClick(event)}\n        sx={{ \n          p: 2, \n          mb: 2, \n          cursor: 'pointer',\n          borderLeft: `4px solid ${project?.color || '#ccc'}`,\n          '&:hover': { \n            boxShadow: theme.shadows[2],\n            transform: 'translateY(-2px)',\n            transition: 'all 0.2s ease-in-out'\n          }\n        }}\n      >\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"flex-start\">\n          <Box>\n            <Typography variant=\"subtitle1\" component=\"span\">\n              {event.title}\n              <Chip \n                label={event.priority}\n                size=\"small\"\n                color={getPriorityColor(event.priority)}\n                variant=\"outlined\"\n                sx={{ ml: 1 }}\n              />\n            </Typography>\n          </Box>\n        </Box>\n      </Paper>\n    );\n  };\n\n  // For other views (day, week, month), we'll implement a simple card view\n  // In a real app, you might want to use a library like FullCalendar or similar\n  return (\n    <Box>\n      <Typography variant=\"h6\" mb={2}>\n        {view.charAt(0).toUpperCase() + view.slice(1)} View\n      </Typography>\n      <Box display=\"grid\" gridTemplateColumns=\"repeat(auto-fill, minmax(300px, 1fr))\" gap={2}>\n        {filteredEvents.map((event) => (\n          <Paper \n            key={event.id} \n            sx={{ \n              p: 2, \n              cursor: 'pointer',\n              borderLeft: `4px solid ${event.color}`,\n              '&:hover': {\n                boxShadow: 3,\n              },\n            }}\n            onClick={() => onEventClick(event)}\n          >\n            <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n              {event.title}\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" mb={1}>\n              {format(new Date(event.startDate), 'MMM d, yyyy h:mm a')}\n            </Typography>\n            <Box display=\"flex\" gap={1} flexWrap=\"wrap\" mt={1}>\n              <Chip \n                label={event.status.replace('-', ' ')}\n                size=\"small\"\n                color={getStatusColor(event.status)}\n                variant=\"outlined\"\n              />\n              <Chip \n                label={event.priority}\n                size=\"small\"\n                color={getPriorityColor(event.priority)}\n                variant=\"outlined\"\n              />\n            </Box>\n          </Paper>\n        ))}\n      </Box>\n      {filteredEvents.length === 0 && (\n        <Box textAlign=\"center\" p={4}>\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            No events found for the selected period.\n          </Typography>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default TimelineView;\n","import { useState, useEffect } from 'react';\nimport { \n  TextField,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Box,\n  Typography,\n  Divider,\n  IconButton,\n  Chip,\n  Avatar,\n  FormControlLabel,\n  Switch,\n  TextFieldProps,\n  FormHelperText\n} from '@mui/material';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { TimePicker } from '@mui/x-date-pickers/TimePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { Close as CloseIcon } from '@mui/icons-material';\nimport { isBefore, isValid } from 'date-fns';\nimport { \n  TimelineEvent, \n  TeamMember,\n  TimelineStatus,\n  TimelinePriority,\n  TimelineProject\n} from '../../types/domains/timeline.types';\n\n// Type guard for TimelineStatus\nfunction isTimelineStatus(status: any): status is TimelineStatus {\n  return ['planned', 'in-progress', 'completed', 'delayed', 'cancelled'].includes(status);\n}\n\n// Type guard for TimelinePriority\nfunction isTimelinePriority(priority: any): priority is TimelinePriority {\n  return ['low', 'medium', 'high', 'critical'].includes(priority);\n}\n\ninterface EventFormModalProps {\n  open: boolean;\n  onClose: () => void;\n  onSubmit: (event: Partial<TimelineEvent>) => void;\n  projects: TimelineProject[];\n  teamMembers: TeamMember[];\n  initialData?: Partial<TimelineEvent>;\n}\n\nconst EventFormModal: React.FC<EventFormModalProps> = ({\n  open,\n  onClose,\n  onSubmit,\n  projects,\n  teamMembers,\n  initialData = {},\n}) => {\n  // Define the form data type with consistent field names\n  interface FormData {\n    title: string;\n    description: string;\n    status: TimelineStatus;\n    priority: TimelinePriority;\n    startDate: Date | null;\n    endDate: Date | null;\n    projectId: string;\n    assignee: string; // This is a string ID representing the assignee\n    isAllDay: boolean;\n    color?: string;\n  }\n\n  const [formData, setFormData] = useState<FormData>({\n    title: '',\n    description: '',\n    status: 'planned' as TimelineStatus,\n    priority: 'medium' as TimelinePriority,\n    startDate: new Date(),\n    endDate: new Date(Date.now() + 60 * 60 * 1000), // 1 hour later\n    projectId: '',\n    assignee: '',\n    isAllDay: false,\n    color: '#1976d2'\n  });\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  useEffect(() => {\n    if (open) {\n      // Ensure status and priority are valid TimelineStatus and TimelinePriority values\n      const defaultStatus: TimelineStatus = 'planned';\n      const defaultPriority: TimelinePriority = 'medium';\n      \n      // Safely extract the project ID\n      let projectId = '';\n      if (initialData?.project) {\n        if (typeof initialData.project === 'string') {\n          projectId = initialData.project;\n        } else if (typeof initialData.project === 'object' && 'id' in initialData.project) {\n          projectId = (initialData.project as { id: string }).id;\n        }\n      }\n      \n      // Safely handle the assignee\n      let assignee = '';\n      if (initialData?.assignee) {\n        if (typeof initialData.assignee === 'string') {\n          assignee = initialData.assignee;\n        } else if (typeof initialData.assignee === 'object' && 'id' in initialData.assignee) {\n          assignee = (initialData.assignee as { id: string }).id;\n        }\n      }\n      \n      setFormData({\n        title: initialData?.title || '',\n        description: initialData?.description || '',\n        status: initialData?.status && isTimelineStatus(initialData.status) \n          ? initialData.status \n          : defaultStatus,\n        priority: initialData?.priority && isTimelinePriority(initialData.priority)\n          ? initialData.priority\n          : defaultPriority,\n        startDate: initialData?.startDate ? new Date(initialData.startDate) : new Date(),\n        endDate: initialData?.endDate ? new Date(initialData.endDate) : new Date(Date.now() + 60 * 60 * 1000),\n        projectId,\n        assignee,\n        isAllDay: initialData?.isAllDay ?? false,\n        color: initialData?.color || '#1976d2'\n      });\n      setErrors({});\n    }\n  }, [open, initialData]);\n\n  const validate = (): boolean => {\n    const newErrors: Record<string, string> = {};\n    \n    if (!formData.title.trim()) {\n      newErrors.title = 'Title is required';\n    }\n    \n    if (!formData.startDate) {\n      newErrors.startDate = 'Start date is required';\n    }\n    \n    if (!formData.endDate) {\n      newErrors.endDate = 'End date is required';\n    } else if (formData.startDate && formData.endDate && isBefore(formData.endDate, formData.startDate)) {\n      newErrors.endDate = 'End date must be after start date';\n    }\n    \n    if (!formData.projectId) {\n      newErrors.projectId = 'Project is required';\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (validate() && formData.startDate && formData.endDate && formData.projectId) {\n      const eventData: Partial<TimelineEvent> = {\n        ...formData,\n        startDate: formData.startDate,\n        endDate: formData.endDate,\n        project: formData.projectId, // Just use the project ID as a string\n        assignee: formData.assignee,\n        status: formData.status,\n        priority: formData.priority,\n        isAllDay: formData.isAllDay\n      };\n      onSubmit(eventData);\n      onClose();\n    }\n  };\n\n  const handleChange = <K extends keyof FormData>(\n    field: K, \n    value: FormData[K]\n  ) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value,\n    }));\n    \n    // Clear error when field is updated\n    if (errors[field]) {\n      setErrors(prev => ({\n        ...prev,\n        [field]: '',\n      }));\n    }\n  };\n\n  const handleDateChange = (field: 'startDate' | 'endDate', date: Date | null) => {\n    if (date && isValid(date)) {\n      handleChange(field, date);\n    }\n  };\n\n  const handleTimeChange = (field: 'startDate' | 'endDate', time: Date | null) => {\n    if (!time || !isValid(time)) return;\n    const currentDate = formData[field] ? new Date(formData[field] as Date) : new Date();\n    currentDate.setHours(time.getHours(), time.getMinutes());\n    handleChange(field, currentDate);\n  };\n\n  return (\n    <Dialog \n      open={open} \n      onClose={onClose}\n      maxWidth=\"md\"\n      fullWidth\n      aria-labelledby=\"event-form-dialog-title\"\n    >\n      <form onSubmit={handleSubmit}>\n        <DialogTitle id=\"event-form-dialog-title\">\n          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n            <Typography variant=\"h6\" component=\"div\">\n              {initialData?.id ? 'Edit Event' : 'Create New Event'}\n            </Typography>\n            <IconButton onClick={onClose} size=\"small\" aria-label=\"close\">\n              <CloseIcon />\n            </IconButton>\n          </Box>\n        </DialogTitle>\n        <Divider />\n        <DialogContent dividers>\n          <Box sx={{ display: 'flex', gap: 3, flexDirection: { xs: 'column', md: 'row' } }}>\n            <Box sx={{ flex: 2 }}>\n              <TextField\n                fullWidth\n                label=\"Event Title\"\n                name=\"title\"\n                value={formData.title}\n                onChange={(e) => handleChange('title', e.target.value)}\n                margin=\"normal\"\n                required\n                error={!!errors.title}\n                helperText={errors.title}\n              />\n              <TextField\n                fullWidth\n                label=\"Description\"\n                name=\"description\"\n                value={formData.description}\n                onChange={(e) => handleChange('description', e.target.value)}\n                margin=\"normal\"\n                multiline\n                rows={4}\n              />\n              <LocalizationProvider dateAdapter={AdapterDateFns}>\n                <Box sx={{ display: 'flex', gap: 2, mt: 1, flexDirection: { xs: 'column', sm: 'row' } }}>\n                  <Box sx={{ flex: 1 }}>\n                    <DatePicker\n                      label=\"Start Date\"\n                      value={formData.startDate}\n                      onChange={(date: Date | null) => handleDateChange('startDate', date)}\n                      slotProps={{\n                        textField: {\n                          fullWidth: true,\n                          margin: 'normal' as const,\n                          required: true,\n                          error: !!errors.startDate,\n                          helperText: errors.startDate\n                        } as TextFieldProps\n                      }}\n                    />\n                  </Box>\n                  {!formData.isAllDay && (\n                    <Box sx={{ flex: 1 }}>\n                      <TimePicker\n                        label=\"Start Time\"\n                        value={formData.startDate}\n                        onChange={(time: Date | null) => handleTimeChange('startDate', time)}\n                        slotProps={{\n                          textField: {\n                            fullWidth: true,\n                            margin: 'normal' as const\n                          } as TextFieldProps\n                        }}\n                      />\n                    </Box>\n                  )}\n                  <Box sx={{ flex: 1 }}>\n                    <DatePicker\n                      label=\"End Date\"\n                      value={formData.endDate}\n                      onChange={(date: Date | null) => handleDateChange('endDate', date)}\n                      slotProps={{\n                        textField: {\n                          fullWidth: true,\n                          margin: 'normal' as const,\n                          required: true,\n                          error: !!errors.endDate,\n                          helperText: errors.endDate\n                        } as TextFieldProps\n                      }}\n                    />\n                  </Box>\n                  {!formData.isAllDay && (\n                    <Box sx={{ flex: 1 }}>\n                      <TimePicker\n                        label=\"End Time\"\n                        value={formData.endDate}\n                        onChange={(time: Date | null) => handleTimeChange('endDate', time)}\n                        slotProps={{\n                          textField: {\n                            fullWidth: true,\n                            margin: 'normal' as const\n                          } as TextFieldProps\n                        }}\n                      />\n                    </Box>\n                  )}\n                </Box>\n              </LocalizationProvider>\n            </Box>\n            <Box sx={{ flex: 1, minWidth: '300px' }}>\n              <FormControl fullWidth margin=\"normal\" error={!!errors.projectId}>\n                <InputLabel id=\"project-label\">Project</InputLabel>\n                <Select\n                  labelId=\"project-label\"\n                  name=\"project\"\n                  value={formData.projectId}\n                  label=\"Project\"\n                  onChange={(e) => {\n                    const projectId = e.target.value as string;\n                    handleChange('projectId', projectId);\n                    // Update color when project changes\n                    const selectedProject = projects.find((p: TimelineProject) => p.id === projectId);\n                    if (selectedProject?.color) {\n                      handleChange('color', selectedProject.color);\n                    }\n                  }}\n                  required\n                >\n                  {projects.map((project) => (\n                    <MenuItem key={project.id} value={project.id}>\n                      <Box display=\"flex\" alignItems=\"center\">\n                        <Box\n                          sx={{\n                            width: 12,\n                            height: 12,\n                            borderRadius: '50%',\n                            bgcolor: project.color || '#1976d2',\n                            mr: 1,\n                          }}\n                        />\n                        {project.name}\n                      </Box>\n                    </MenuItem>\n                  ))}\n                </Select>\n                {errors.projectId && (\n                  <FormHelperText>{errors.projectId}</FormHelperText>\n                )}\n              </FormControl>\n              \n              <FormControl fullWidth margin=\"normal\">\n                <InputLabel id=\"assignee-label\">Assignee</InputLabel>\n                <Select\n                  labelId=\"assignee-label\"\n                  name=\"assignee\"\n                  value={formData.assignee}\n                  label=\"Assignee\"\n                  onChange={(e) => handleChange('assignee', e.target.value as string)}\n                >\n                  <MenuItem value=\"\">\n                    <em>Unassigned</em>\n                  </MenuItem>\n                  {teamMembers.map((member) => (\n                    <MenuItem key={member.id} value={member.id}>\n                      <Box display=\"flex\" alignItems=\"center\">\n                        {member.avatar ? (\n                          <Avatar \n                            src={member.avatar} \n                            alt={member.name}\n                            sx={{ width: 24, height: 24, mr: 1, fontSize: '0.75rem' }}\n                          />\n                        ) : (\n                          <Avatar \n                            sx={{ \n                              width: 24, \n                              height: 24, \n                              mr: 1, \n                              bgcolor: 'primary.main',\n                              fontSize: '0.75rem',\n                            }}\n                          >\n                            {member.name.charAt(0).toUpperCase()}\n                          </Avatar>\n                        )}\n                        {member.name}\n                      </Box>\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n\n              <FormControl fullWidth margin=\"normal\">\n                <InputLabel id=\"status-label\">Status</InputLabel>\n                <Select\n                  labelId=\"status-label\"\n                  name=\"status\"\n                  value={formData.status}\n                  label=\"Status\"\n                  onChange={(e) => handleChange('status', e.target.value as any)}\n                >\n                  <MenuItem value=\"planned\">\n                    <Chip \n                      label=\"Planned\" \n                      size=\"small\" \n                      color=\"default\"\n                      variant=\"outlined\"\n                      sx={{ mr: 1 }}\n                    />\n                  </MenuItem>\n                  <MenuItem value=\"in-progress\">\n                    <Chip \n                      label=\"In Progress\" \n                      size=\"small\" \n                      color=\"primary\"\n                      variant=\"outlined\"\n                      sx={{ mr: 1 }}\n                    />\n                  </MenuItem>\n                  <MenuItem value=\"completed\">\n                    <Chip \n                      label=\"Completed\" \n                      size=\"small\" \n                      color=\"success\"\n                      variant=\"outlined\"\n                      sx={{ mr: 1 }}\n                    />\n                  </MenuItem>\n                  <MenuItem value=\"delayed\">\n                    <Chip \n                      label=\"Delayed\" \n                      size=\"small\" \n                      color=\"warning\"\n                      variant=\"outlined\"\n                      sx={{ mr: 1 }}\n                    />\n                  </MenuItem>\n                  <MenuItem value=\"cancelled\">\n                    <Chip \n                      label=\"Cancelled\" \n                      size=\"small\" \n                      color=\"error\"\n                      variant=\"outlined\"\n                      sx={{ mr: 1 }}\n                    />\n                  </MenuItem>\n                </Select>\n              </FormControl>\n\n              <FormControl fullWidth margin=\"normal\">\n                <InputLabel id=\"priority-label\">Priority</InputLabel>\n                <Select\n                  labelId=\"priority-label\"\n                  name=\"priority\"\n                  value={formData.priority}\n                  label=\"Priority\"\n                  onChange={(e) => handleChange('priority', e.target.value as any)}\n                >\n                  <MenuItem value=\"low\">\n                    <Chip \n                      label=\"Low\" \n                      size=\"small\" \n                      color=\"success\"\n                      variant=\"outlined\"\n                      sx={{ mr: 1 }}\n                    />\n                  </MenuItem>\n                  <MenuItem value=\"medium\">\n                    <Chip \n                      label=\"Medium\" \n                      size=\"small\" \n                      color=\"warning\"\n                      variant=\"outlined\"\n                      sx={{ mr: 1 }}\n                    />\n                  </MenuItem>\n                  <MenuItem value=\"high\">\n                    <Chip \n                      label=\"High\" \n                      size=\"small\" \n                      color=\"error\"\n                      variant=\"outlined\"\n                      sx={{ mr: 1 }}\n                    />\n                  </MenuItem>\n                  <MenuItem value=\"critical\">\n                    <Chip \n                      label=\"Critical\" \n                      size=\"small\" \n                      color=\"error\"\n                      sx={{ \n                        mr: 1,\n                        fontWeight: 'bold',\n                        '& .MuiChip-label': {\n                          px: 1,\n                        },\n                      }}\n                    />\n                  </MenuItem>\n                </Select>\n              </FormControl>\n\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={formData.isAllDay}\n                    onChange={(e) => handleChange('isAllDay', e.target.checked)}\n                    name=\"isAllDay\"\n                    color=\"primary\"\n                  />\n                }\n                label=\"All day event\"\n                sx={{ mt: 1, display: 'block' }}\n              />\n            </Box>\n          </Box>\n        </DialogContent>\n        <Divider />\n        <DialogActions sx={{ p: 2 }}>\n          <Button onClick={onClose} color=\"inherit\">\n            Cancel\n          </Button>\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            {initialData?.id ? 'Update' : 'Create'} Event\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\n\nexport default EventFormModal;","import { Box, Typography, Paper, Button } from '@mui/material';\nimport { Add as AddIcon } from '@mui/icons-material';\nimport { useState } from 'react';\nimport type { TimelineEvent, TimelineProject as Project, TeamMember, TimelineView as TimelineViewType } from '../../types/domains/timeline.types';\nimport TimelineView from './TimelineView';\nimport EventFormModal from './EventFormModal';\nimport { useQuery } from '@tanstack/react-query';\nimport * as api from '../../services/api';\n\nconst TimelinePage = () => {\n  const [view, setView] = useState<TimelineViewType>('week');\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  \n  // Fetch events from the API and transform them to TimelineEvents\n  const { data: events = [], isLoading } = useQuery({\n    queryKey: ['events'],\n    queryFn: async () => {\n      const apiEvents = await api.getEvents({ limit: 50 });\n      // Transform API events to TimelineEvents\n      return apiEvents.map(event => ({\n        id: event.id,\n        title: event.title,\n        description: event.description || '',\n        startDate: new Date(), // You'll need to set the correct date from the event\n        endDate: new Date(),   // You'll need to set the correct date from the event\n        project: 'default',    // You'll need to set the correct project ID\n        assignee: 'user-1',    // You'll need to set the correct assignee\n        status: 'planned',     // Default status\n        priority: 'medium',    // Default priority\n        color: '#4e73df',      // Default color\n        createdAt: new Date(event.timestamp || Date.now()),\n        updatedAt: new Date(event.timestamp || Date.now())\n      }));\n    }\n  });\n\n  // Mock projects and team members - replace with real data if available\n  const projects: Project[] = [\n    { id: 'default', name: 'Default Project', color: '#4e73df' }\n  ];\n\n  const teamMembers: TeamMember[] = [\n    { id: 'user-1', name: 'Current User', role: 'User' }\n  ];\n\n  const handleEventClick = (event: any) => {\n    // Handle event click\n    console.log('Event clicked:', event);\n  };\n\n  const handleEventSubmit = (event: any) => {\n    // Handle event submission\n    console.log('Event submitted:', event);\n    setIsModalOpen(false);\n  };\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n        <Typography variant=\"h4\" component=\"h1\">\n          Timeline\n        </Typography>\n        <Button\n          variant=\"contained\"\n          startIcon={<AddIcon />}\n          onClick={() => setIsModalOpen(true)}\n        >\n          New Event\n        </Button>\n      </Box>\n      \n      <Paper sx={{ p: 3, mt: 2 }}>\n        <TimelineView\n          view={view}\n          events={events.map(event => ({ ...event, status: event.status as any, priority: event.priority as any }))}\n          onEventClick={handleEventClick}\n          selectedDate={new Date()}\n          projects={projects}\n          teamMembers={teamMembers}\n          onViewChange={(newView: TimelineViewType) => setView(newView)}\n        />\n      </Paper>\n\n      <EventFormModal\n        open={isModalOpen}\n        onClose={() => setIsModalOpen(false)}\n        onSubmit={handleEventSubmit}\n        projects={projects}\n        teamMembers={teamMembers}\n      />\n    </Box>\n  );\n};\n\nexport default TimelinePage;\n"],"names":["_ref","view","events","onEventClick","selectedDate","projects","teamMembers","onViewChange","useTheme","filteredEvents","length","filter","event","eventDate","Date","startDate","eventEndDate","endDate","isSameDay","start","startOfWeek","end","endOfWeek","isSameMonth","getStatusColor","status","toLowerCase","getPriorityColor","priority","_jsxs","Box","children","Typography","variant","mb","charAt","toUpperCase","slice","_jsx","display","gridTemplateColumns","gap","map","Paper","sx","p","cursor","borderLeft","concat","color","boxShadow","onClick","fontWeight","title","format","flexWrap","mt","Chip","label","replace","size","id","textAlign","open","onClose","onSubmit","initialData","formData","setFormData","useState","description","now","projectId","assignee","isAllDay","errors","setErrors","useEffect","_initialData$isAllDay","defaultStatus","defaultPriority","project","includes","handleChange","field","value","prev","_objectSpread","handleDateChange","date","isValid","handleTimeChange","time","currentDate","setHours","getHours","getMinutes","Dialog","maxWidth","fullWidth","e","preventDefault","validate","newErrors","trim","isBefore","Object","keys","eventData","DialogTitle","justifyContent","alignItems","component","IconButton","CloseIcon","Divider","DialogContent","dividers","flexDirection","xs","md","flex","TextField","name","onChange","target","margin","required","error","helperText","multiline","rows","LocalizationProvider","dateAdapter","AdapterDateFns","sm","DatePicker","slotProps","textField","TimePicker","minWidth","FormControl","InputLabel","Select","labelId","selectedProject","find","MenuItem","width","height","borderRadius","bgcolor","mr","FormHelperText","member","avatar","Avatar","src","alt","fontSize","px","FormControlLabel","control","Switch","checked","DialogActions","Button","type","TimelinePage","setView","isModalOpen","setIsModalOpen","data","isLoading","useQuery","queryKey","queryFn","async","api","limit","createdAt","timestamp","updatedAt","role","startIcon","AddIcon","TimelineView","console","log","newView","EventFormModal"],"sourceRoot":""}
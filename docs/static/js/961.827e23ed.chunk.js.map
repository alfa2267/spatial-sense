{"version":3,"file":"static/js/961.827e23ed.chunk.js","mappings":"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","sources":["services/data/BaseDataService.ts","services/data/dataService.ts","pages/StrategiesPage/StrategiesPage.tsx"],"sourcesContent":["import { ApiResponse } from '../../types/api/response.types';\n\ntype EntityType = \n  | 'clients' \n  | 'projects' \n  | 'devices' \n  | 'strategies' \n  | 'dashboards' \n  | 'invoices' \n  | 'timeline' \n  | 'floorplans';\n\ninterface DataServiceConfig {\n  baseUrl: string;\n  useMockData: boolean;\n  mockDataPath: string;\n}\n\n// Base interface for entities with common fields\ninterface BaseEntity {\n  id: string;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\n// Type for create operations (without id, createdAt, updatedAt)\ntype CreateData<T> = Omit<T, 'id' | 'createdAt' | 'updatedAt'>;\n\n// Type for update operations (without createdAt, but can include updatedAt)\ntype UpdateData<T> = Partial<Omit<T, 'id' | 'createdAt'>>;\n\nexport abstract class BaseDataService {\n  protected config: DataServiceConfig = {\n    baseUrl: '/api',\n    useMockData: true,\n    mockDataPath: '/data'\n  };\n\n  /**\n   * Configure the data service\n   */\n  public configure(config: Partial<DataServiceConfig>): void {\n    this.config = { ...this.config, ...config };\n  }\n\n  /**\n   * Generic fetch wrapper with error handling\n   */\n  protected async fetch<T>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<ApiResponse<T>> {\n    if (this.config.useMockData) {\n      return this.mockFetch<T>(endpoint, options);\n    }\n\n    const url = `${this.config.baseUrl}${endpoint}`;\n    \n    try {\n      const response = await fetch(url, {\n        ...options,\n        headers: {\n          'Content-Type': 'application/json',\n          ...options.headers,\n        },\n      });\n\n      if (!response.ok) {\n        let errorMessage = `Request failed with status ${response.status}`;\n        try {\n          const errorData = await response.json();\n          errorMessage = errorData.message || errorMessage;\n        } catch {\n          // If parsing JSON fails, use the default error message\n        }\n        \n        throw new Error(errorMessage);\n      }\n      \n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error(`API Error [${endpoint}]:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Mock implementation for local JSON files\n   */\n  private async mockFetch<T>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<ApiResponse<T>> {\n    // Clean and parse the endpoint\n    const pathParts = endpoint.replace(/^\\//, '').split('/').filter(Boolean);\n    const [entityType, id] = pathParts;\n    const method = options.method || 'GET';\n\n    // Validate entity type\n    if (!this.isValidEntityType(entityType)) {\n      throw new Error(`Invalid entity type: ${entityType}`);\n    }\n\n    try {\n      if (method === 'GET' && entityType && !id) {\n        // GET /entities\n        const response = await fetch(`${this.config.mockDataPath}/${entityType}.json`);\n        if (!response.ok) {\n          throw new Error(`Mock data file not found: ${entityType}.json`);\n        }\n        const data = await response.json();\n        return { data, success: true } as ApiResponse<T>;\n        \n      } else if (method === 'GET' && entityType && id) {\n        // GET /entities/:id\n        const response = await fetch(`${this.config.mockDataPath}/${entityType}.json`);\n        if (!response.ok) {\n          throw new Error(`Mock data file not found: ${entityType}.json`);\n        }\n        const items = await response.json();\n        const data = Array.isArray(items) ? items.find((item: any) => item.id === id) : null;\n        \n        if (!data) {\n          throw new Error(`${this.getEntitySingular(entityType)} with id '${id}' not found`);\n        }\n        return { data, success: true } as ApiResponse<T>;\n        \n      } else if (method === 'POST' && entityType) {\n        // POST /entities\n        if (!options.body) {\n          throw new Error('Request body is required for POST operations');\n        }\n        \n        const newItem = JSON.parse(options.body as string);\n        const now = new Date().toISOString();\n        const mockEntity = {\n          ...newItem,\n          id: `mock-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          createdAt: now,\n          updatedAt: now\n        };\n        \n        return { data: mockEntity, success: true } as ApiResponse<T>;\n        \n      } else if (method === 'PUT' && entityType && id) {\n        // PUT /entities/:id\n        if (!options.body) {\n          throw new Error('Request body is required for PUT operations');\n        }\n        \n        const updates = JSON.parse(options.body as string);\n        const updatedEntity = {\n          ...updates,\n          id, // Ensure ID is preserved\n          updatedAt: new Date().toISOString()\n        };\n        \n        return { data: updatedEntity, success: true } as ApiResponse<T>;\n        \n      } else if (method === 'DELETE' && entityType && id) {\n        // DELETE /entities/:id\n        return { \n          data: { success: true, id } as T, \n          success: true \n        } as ApiResponse<T>;\n      }\n      \n      throw new Error(`Unsupported operation: ${method} ${endpoint}`);\n      \n    } catch (error) {\n      console.error('Mock fetch error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Validate if the entity type is supported\n   */\n  private isValidEntityType(entityType: string): entityType is EntityType {\n    const validTypes: EntityType[] = [\n      'clients', 'projects', 'devices', 'strategies', \n      'dashboards', 'invoices', 'timeline', 'floorplans'\n    ];\n    return validTypes.includes(entityType as EntityType);\n  }\n\n  /**\n   * Get singular form of entity type for error messages\n   */\n  private getEntitySingular(entityType: EntityType): string {\n    const singularMap: Record<EntityType, string> = {\n      clients: 'client',\n      projects: 'project',\n      devices: 'device',\n      strategies: 'strategy',\n      dashboards: 'dashboard',\n      invoices: 'invoice',\n      timeline: 'timeline',\n      floorplans: 'floorplan'\n    };\n    return singularMap[entityType] || entityType;\n  }\n\n  // Generic CRUD Operations with improved type safety\n  protected async getAllEntities<T extends BaseEntity>(\n    entityType: EntityType,\n    params: Record<string, string | number | boolean> = {}\n  ): Promise<T[]> {\n    const searchParams = new URLSearchParams();\n    Object.entries(params).forEach(([key, value]) => {\n      if (value !== undefined && value !== null) {\n        searchParams.append(key, String(value));\n      }\n    });\n    \n    const query = searchParams.toString();\n    const endpoint = `/${entityType}${query ? `?${query}` : ''}`;\n    const response = await this.fetch<T[]>(endpoint);\n    return response?.data || [];\n  }\n\n  protected async getEntityById<T extends BaseEntity>(\n    entityType: EntityType,\n    id: string\n  ): Promise<T> {\n    if (!id || typeof id !== 'string') {\n      throw new Error('Valid ID is required');\n    }\n    \n    const response = await this.fetch<T>(`/${entityType}/${encodeURIComponent(id)}`);\n    if (!response.data) {\n      throw new Error(`No data returned for ${entityType} with id ${id}`);\n    }\n    return response.data;\n  }\n\n  protected async createEntity<T extends BaseEntity>(\n    entityType: EntityType,\n    data: CreateData<T>\n  ): Promise<T> {\n    if (!data || typeof data !== 'object') {\n      throw new Error('Valid data object is required');\n    }\n    \n    const response = await this.fetch<T>(`/${entityType}`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n    \n    if (!response.data) {\n      throw new Error(`Failed to create ${entityType}`);\n    }\n    return response.data;\n  }\n\n  protected async updateEntity<T extends BaseEntity>(\n    entityType: EntityType,\n    id: string,\n    data: UpdateData<T>\n  ): Promise<T> {\n    if (!id || typeof id !== 'string') {\n      throw new Error('Valid ID is required');\n    }\n    if (!data || typeof data !== 'object') {\n      throw new Error('Valid data object is required');\n    }\n    \n    const response = await this.fetch<T>(`/${entityType}/${encodeURIComponent(id)}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n    \n    if (!response.data) {\n      throw new Error(`Failed to update ${entityType} with id ${id}`);\n    }\n    return response.data;\n  }\n\n  protected async deleteEntity(\n    entityType: EntityType,\n    id: string\n  ): Promise<{ success: boolean; id: string }> {\n    if (!id || typeof id !== 'string') {\n      throw new Error('Valid ID is required');\n    }\n    \n    const response = await this.fetch<{ success: boolean; id: string }>(\n      `/${entityType}/${encodeURIComponent(id)}`, \n      { method: 'DELETE' }\n    );\n    \n    if (!response.data) {\n      throw new Error(`Failed to delete ${entityType} with id ${id}`);\n    }\n    \n    return { success: true, id };\n  }\n}","import { Project, Client } from '../../types';\nimport { ApiResponse } from '../../types/api/response.types';\nimport { BaseDataService } from './BaseDataService';\n\nexport class DataService extends BaseDataService {\n  // Expose the base protected fetch as a public method for consumers\n  public async fetch<T>(endpoint: string, options: RequestInit = {}): Promise<ApiResponse<T>> {\n    return super.fetch<T>(endpoint, options);\n  }\n  private static async loadData<T>(file: string): Promise<T> {\n    try {\n      const response = await fetch(`/data/${file}`);\n      if (!response.ok) {\n        throw new Error(`Failed to load ${file}: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(`Error loading ${file}:`, error);\n      throw error;\n    }\n  }\n\n  static async getClients(): Promise<Client[]> {\n    return this.loadData<Client[]>('clients.json');\n  }\n\n  static async getProjects(): Promise<Project[]> {\n    try {\n      const projects = await this.loadData<Project[]>('projects.json');\n      \n      if (!projects || (Array.isArray(projects) && projects.length === 0) || \n          (typeof projects === 'object' && Object.keys(projects).length === 0)) {\n        console.warn('No valid projects data found, using default data');\n        return this.getDefaultProjects();\n      }\n      \n      return projects;\n    } catch (error) {\n      console.warn('Error loading projects, using default data:', error);\n      return this.getDefaultProjects();\n    }\n  }\n  \n  private static getDefaultProjects(): Project[] {\n    return [\n      {\n        id: 'proj-001',\n        name: 'Residential Property Analysis',\n        clientId: 'client-001',\n        status: 'active',\n        progress: 65,\n        startDate: new Date().toISOString(),\n        targetDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n        budget: 5000,\n        description: 'Comprehensive analysis of residential property market trends',\n        location: 'London',\n        type: 'residential',\n        team: ['user-001', 'user-002'],\n        tags: ['residential', 'market-analysis', 'high-priority'],\n        createdBy: 'user-001',\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      },\n      // Add more default projects as needed\n    ];\n  }\n  \n  // Add other data access methods here as needed\n}\n\nexport const dataService = new DataService();\n","import { useState, useEffect } from 'react';\nimport { \n  Box, \n  Typography, \n  Button, \n  Divider, \n  Alert,\n} from '@mui/material';\nimport { Add as AddIcon } from '@mui/icons-material';\nimport { Strategy } from '../../types/domains/strategy.types';\nimport { dataService } from '../../services/data/dataService';\nimport { ApiResponse } from '../../types/api/response.types';\nimport { \n  PageContainer, \n  PageHeader, \n  DataCard, \n  StatusChip, \n  EmptyState,\n  LoadingOverlay\n} from '../../components';\n\nconst StrategiesPage = () => {\n  const [strategies, setStrategies] = useState<Strategy[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const loadStrategies = async () => {\n      try {\n        setLoading(true);\n        const response: ApiResponse<Strategy[]> = await dataService.fetch('/strategies');\n        if (response.success && response.data) {\n          setStrategies(response.data);\n        } else {\n          setError('Failed to load strategies');\n        }\n      } catch (err) {\n        console.error('Error loading strategies:', err);\n        setError('An error occurred while loading strategies');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadStrategies();\n  }, []);\n\n  const handleCreateStrategy = () => {\n    // Navigate to create strategy page or open a dialog\n    console.log('Navigate to create strategy');\n  };\n\n\n  return (\n    <PageContainer>\n      <PageHeader\n        title=\"Strategies\"\n        actions={[\n          {\n            label: 'New Strategy',\n            onClick: handleCreateStrategy,\n            icon: <AddIcon />,\n          },\n        ]}\n        loading={loading}\n      />\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          {error}\n        </Alert>\n      )}\n\n      <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: 'repeat(2, 1fr)', lg: 'repeat(3, 1fr)' }, gap: 3 }}>\n        {loading && strategies.length === 0 ? (\n          Array.from({ length: 6 }).map((_, index) => (\n            <DataCard key={index} loading />\n          ))\n        ) : (\n          strategies.map((strategy) => (\n            <DataCard\n              key={strategy.id}\n              title={strategy.name}\n              subtitle={strategy.description}\n              onClick={() => console.log('View strategy:', strategy.id)}\n            >\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                <StatusChip status={strategy.status as any} />\n              </Box>\n              <Divider sx={{ my: 2 }} />\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                <Typography variant=\"caption\" color=\"text.secondary\">\n                  Last updated: {strategy.lastUpdated}\n                </Typography>\n                <Button size=\"small\" color=\"primary\">\n                  View Details\n                </Button>\n              </Box>\n            </DataCard>\n          ))\n        )}\n      </Box>\n\n      {!loading && strategies.length === 0 && !error && (\n        <Box sx={{ mt: 4 }}>\n          <EmptyState\n            title=\"No Strategies Found\"\n            description=\"Get started by creating your first strategy\"\n            actionLabel=\"Create Strategy\"\n            onAction={handleCreateStrategy}\n            icon={<AddIcon />}\n          />\n        </Box>\n      )}\n\n      <LoadingOverlay loading={loading && strategies.length > 0} variant=\"inline\" />\n    </PageContainer>\n  );\n};\n\nexport default StrategiesPage;\n"],"names":["BaseDataService","constructor","config","baseUrl","useMockData","mockDataPath","configure","this","_objectSpread","fetch","endpoint","options","arguments","length","undefined","mockFetch","url","concat","response","headers","ok","errorMessage","status","json","message","_unused","Error","error","console","pathParts","replace","split","filter","Boolean","entityType","id","method","isValidEntityType","data","success","items","Array","isArray","find","item","getEntitySingular","body","newItem","JSON","parse","now","Date","toISOString","Math","random","toString","substr","createdAt","updatedAt","updates","includes","clients","projects","devices","strategies","dashboards","invoices","timeline","floorplans","getAllEntities","params","searchParams","URLSearchParams","Object","entries","forEach","_ref","key","value","append","String","query","getEntityById","encodeURIComponent","createEntity","stringify","updateEntity","deleteEntity","dataService","super","loadData","file","statusText","getClients","getProjects","keys","warn","getDefaultProjects","name","clientId","progress","startDate","targetDate","budget","description","location","type","team","tags","createdBy","StrategiesPage","setStrategies","useState","loading","setLoading","setError","useEffect","async","err","loadStrategies","handleCreateStrategy","log","_jsxs","PageContainer","children","_jsx","PageHeader","title","actions","label","onClick","icon","AddIcon","Alert","severity","sx","mb","Box","display","gridTemplateColumns","xs","md","lg","gap","from","map","_","index","DataCard","strategy","subtitle","justifyContent","alignItems","StatusChip","Divider","my","Typography","variant","color","lastUpdated","Button","size","mt","EmptyState","actionLabel","onAction","LoadingOverlay"],"sourceRoot":""}